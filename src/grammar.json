{
  "name": "langX",
  "word": "IDENTIFIER",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "SYMBOL",
        "name": "statement"
      }
    },
    "statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "declar_stmt"
        },
        {
          "type": "SYMBOL",
          "name": "con_ctl_stmt"
        },
        {
          "type": "SYMBOL",
          "name": "simple_stmt"
        }
      ]
    },
    "declar_stmt": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "func_declar_stmt"
        },
        {
          "type": "SYMBOL",
          "name": "var_declar_stmt"
        },
        {
          "type": "SYMBOL",
          "name": "class_declar_stmt"
        }
      ]
    },
    "func_declar_stmt": {
      "type": "STRING",
      "value": "func"
    },
    "_element_var_declar_stmt": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "id_expr"
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "id_expr"
            },
            {
              "type": "STRING",
              "value": "["
            },
            {
              "type": "SYMBOL",
              "name": "int_expr"
            },
            {
              "type": "STRING",
              "value": "]"
            }
          ]
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "id_expr"
            },
            {
              "type": "STRING",
              "value": "["
            },
            {
              "type": "SYMBOL",
              "name": "call_statement"
            },
            {
              "type": "STRING",
              "value": "]"
            }
          ]
        }
      ]
    },
    "var_declar_stmt": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_element_var_declar_stmt"
            },
            {
              "type": "STRING",
              "value": ";"
            }
          ]
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_element_var_declar_stmt"
            },
            {
              "type": "STRING",
              "value": ","
            },
            {
              "type": "SYMBOL",
              "name": "var_declar_stmt"
            }
          ]
        }
      ]
    },
    "class_declar_stmt": {
      "type": "STRING",
      "value": "class"
    },
    "con_ctl_stmt": {
      "type": "STRING",
      "value": "xx"
    },
    "simple_stmt": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "call_statement"
        }
      ]
    },
    "call_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "id_expr"
            },
            {
              "type": "STRING",
              "value": "("
            },
            {
              "type": "STRING",
              "value": ")"
            }
          ]
        }
      ]
    },
    "id_expr": {
      "type": "SYMBOL",
      "name": "IDENTIFIER"
    },
    "int_expr": {
      "type": "SYMBOL",
      "name": "XINTEGER"
    },
    "number_expr": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "TDOUBLE"
        },
        {
          "type": "SYMBOL",
          "name": "XINTEGER"
        }
      ]
    },
    "IDENTIFIER": {
      "type": "PATTERN",
      "value": "[$_a-zA-Z][$_a-zA-Z0-9]*"
    },
    "TSTRING": {
      "type": "PATTERN",
      "value": "\\\"(\\\\.|[^\\\\\"\\n])*\\\""
    },
    "XINTEGER": {
      "type": "PATTERN",
      "value": "0|([1-9][0-9]*)"
    },
    "TDOUBLE": {
      "type": "PATTERN",
      "value": "(0|[1-9][0-9]*)\\.[0-9]+"
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}

